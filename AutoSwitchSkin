#!/usr/bin/env python3
import yaml
import sys
import re
import shutil  # 用于文件复制
import os
from tqdm import tqdm

def load_config(config_path):
    """加载 YAML 配置文件。"""
    try:
        with open(config_path, 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
        return config
    except FileNotFoundError:
        print(f"错误: 配置文件 '{config_path}' 未找到。")
        sys.exit(1)
    except yaml.YAMLError as e:
        print(f"错误: 解析 YAML 配置文件时出错: {e}")
        sys.exit(1)

def decimal_to_hex_little_endian(number):
    """将十进制数转换为十六进制（小端序）。"""
    hex_str = number.to_bytes(4, byteorder='little').hex()
    return hex_str

def swap_hex_bytes(content, hex1, hex2):
    """在字节内容中互换两个十六进制值的位置。"""
    bytes1 = bytes.fromhex(hex1)
    bytes2 = bytes.fromhex(hex2)
    indices1 = [m.start() for m in re.finditer(re.escape(bytes1), content)]
    indices2 = [m.start() for m in re.finditer(re.escape(bytes2), content)]
    if len(indices1) == 0 or len(indices2) == 0:
        return content, False  # 返回 False 表示未互换成功
    swap_count = min(len(indices1), len(indices2))
    new_content = bytearray(content)
    for i in range(swap_count):
        index1 = indices1[i]
        index2 = indices2[i]
        len1 = len(bytes1)
        len2 = len(bytes2)
        if len1 != len2:
            print(f"错误: 十六进制值 '{hex1}' 和 '{hex2}' 的字节长度不同，无法互换。")
            return content, False  # 返回 False 表示未互换成功
        new_content[index1:index1 + len1] = bytes2
        new_content[index2:index2 + len2] = bytes1
    return new_content, True  # 返回 True 表示互换成功

def find_file_in_dir(start_dir, target_file_name):
    """递归查找文件夹及其子文件夹，找到目标文件并返回其路径。"""
    for root, dirs, files in os.walk(start_dir):
        if target_file_name in files:
            return os.path.join(root, target_file_name)
    return None  # 如果没找到文件，返回 None

def main():
    config_path = '美化配置.yaml'
    config = load_config(config_path)
    file_path = config.get('file_path')
    swap_pairs = config.get('swap_pairs', [])
    
    # 从配置文件中获取文件名
    target_file_name = file_path.split('/')[-1]
    
    source_dir = "解包数据/dat"
    
    # 使用递归方式查找目标文件
    source_path = find_file_in_dir(source_dir, target_file_name)
    if not source_path:
        print(f"错误: 未在 '{source_dir}' 中找到文件 '{target_file_name}'")
        sys.exit(1)

    # 确定目标文件夹和目标路径
    destination_dir = "打包/dat"
    destination_path = os.path.join(destination_dir, target_file_name)

    # 创建目标文件夹（如果不存在）
    if not os.path.exists(destination_dir):
        os.makedirs(destination_dir)
    
    try:
        # 复制文件到目标目录
        shutil.copy(source_path, destination_path)
        print(f"文件 '{source_path}' 已成功复制到 '{destination_path}'")

        # 读取源文件并进行美化
        with open(destination_path, 'rb') as file:
            content = file.read()
        failed_pairs = []
        for dec1, dec2 in tqdm(swap_pairs, desc="美化进度", unit="对", 
                               bar_format="{l_bar}{bar} {n_fmt}/{total_fmt} [{elapsed}]", 
                               colour="green"):
            hex1 = decimal_to_hex_little_endian(dec1)
            hex2 = decimal_to_hex_little_endian(dec2)
            content, swapped = swap_hex_bytes(content, hex1, hex2)
            if not swapped:
                failed_pairs.append((dec1, dec2))
        
        # 将修改后的文件保存到目标文件
        with open(destination_path, 'wb') as file:
            file.write(content)
        print(f"成功修改美化文件 '{destination_path}' ")
        
        # 如果有未成功修改的十六进制值，列出它们
        if failed_pairs:
            print("\n以下值未修改完成请查看配置是否错误：")
            for dec1, dec2 in failed_pairs:
                print(f"{dec1} ☞ {dec2}")
        else:
            print("\n所有美化值均已成功修改。")
    
    except FileNotFoundError:
        print(f"错误: 文件 '{source_path}' 未找到。")
    except Exception as e:
        print(f"发生错误: {e}")

if __name__ == "__main__":
    main()
